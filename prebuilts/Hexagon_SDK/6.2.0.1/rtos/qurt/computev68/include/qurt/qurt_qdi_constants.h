#ifndef QDI_CONSTANTS_H
#define QDI_CONSTANTS_H

/**
  @file qurt_qdi_constants.h
  @brief  Predefined invocation methods for drivers.  

 EXTERNALIZED FUNCTIONS
  None

 INITIALIZATION AND SEQUENCING REQUIREMENTS
  None

 Copyright (c) 2013-2023 by Qualcomm Technologies, Inc.  All Rights Reserved.
 Confidential and Proprietary - Qualcomm Technologies, Inc..
 ======================================================================*/

#ifdef __cplusplus
extern "C" {
#endif

/*
||  Method numbers used for QDI.
||
||  Intended grouping of method numbers for QDI
||   including future usage:
||
||   Method 0 should always be unused and not responded to by
||    any driver.
||   Methods 1 and 2 are reserved for name registration and
||    name lookup.
||   Methods 3 through 31 are reserved for POSIX-type operations
||    on open handles.
||   Methods 32 through 127 are reserved for the QDI infrastructure
||    and may be extended in the future to provide standard
||    driver debug services, management services, and system
||    notifications.
||   Methods 128 through 255 are reserved for the use of automatically
||    generated methods such as might be generated by an IDL (interface
||    definition language).  The infrastructure may be extended to
||    perform services on these methods based on information provided
||    by the IDL, such as automatic buffer validation, etc.  These
||    method numbers should not be used for any "ad hoc" methods.
||   Methods with number >= 256 are "private" method numbers that are
||    outside the scope of the QDI infrastructure.  Drivers that want
||    to generate and consume their own "ad hoc" methods are free to
||    use these method numbers as they wish. The infrastructure does
||    not generate these method numbers or respond to them, but
||    passes them on unmolested.
||
||   All driver implementations *should* return a value of
||    -1 when called with an unsupported method.  The standard error
||    return value for POSIX APIs is -1, so we emulate that behavior
||    here.
*/
/** @cond */
#define QDI_UNUSED              0
#define QDI_DEVNAME_REGISTER    1
#define QDI_OPEN                2
#define QDI_CLOSE               3
#define QDI_READ                4
#define QDI_WRITE               5
#define QDI_IOCTL               6
#define QDI_MMAP                7
#define QDI_OS_FILEOPEN         8
#define QDI_FLEN                9
#define QDI_UNLINK             10
#define QDI_FTELL              22
#define QDI_SEEK               23
#define QDI_FSTAT              24

#define QDI_FSNAME_REGISTER     150    
#define QDI_FS_OPEN             151
#define QDI_MMAP2               153
#define QDI_MPROTECT2           154
#define QDI_MUNMAP2             155

#define QDI_CLIENT_HANDLE_OBJREF_GET    10

#define QDI_OS_PROCESS_LOAD             12
#define QDI_OS_PROCESS_CHOOSE_ASID      13

#define QDI_OS_SET_GP                    26
#define QDI_CLIENT_HANDLE_CALLBACK       27
   
#define QDI_CLIENT_HANDLE_ISLAND_HANDLE_CREATE_FROM_OBJ_T  19 //reused
#define QDI_CLIENT_HANDLE_HANDLE_CREATE_FROM_OBJ_T 80
#define QDI_CLIENT_HANDLE_HANDLE_RELEASE           81
#define QDI_CLIENT_HANDLE_COPY_FROM_USER           82
#define QDI_CLIENT_HANDLE_COPY_TO_USER             83
#define QDI_CLIENT_HANDLE_SIGNAL_GROUP_CREATE      86
#define QDI_CLIENT_HANDLE_SAFE_CACHE_OPS           87

#define QDI_CLIENT_HANDLE_BUFFER_LOCK   41
#define QDI_CLIENT_HLOSPOOL_INFO_GET    90
#define QDI_CLIENT_HLOSPOOL2_INFO_GET   96

#define QDI_CLIENT_PID                  44
#define QDI_CLIENT_ASID                 QDI_CLIENT_PID

#define QDI_OS_CLIENT_INFO_GET          48

#define QDI_OS_MEM_LOOKUP_PHYSADDR      57

#define QDI_OS_THREAD_ITERATOR_CREATE   68
#define QDI_OS_THREAD_ITERATOR_NEXT     69

#define QDI_OS_SYSENV                   78

#define QDI_REGION_USERMALLOC_INIT      180 // This method is for generic handle


#define QDI_CLIENT_HANDLE_USER_MALLOC              84
#define QDI_CLIENT_HANDLE_USER_FREE                85

#define QDI_SIGNAL_GROUP_SIGNAL_CREATE          96
#define QDI_SIGNAL_GROUP_WAIT                   98
#define QDI_SIGNAL_GROUP_POLL                   99
#define QDI_SIGNAL_SET                          96
#define QDI_SIGNAL_CLEAR                        97
#define QDI_SIGNAL_WAIT                         98
#define QDI_SIGNAL_POLL                         99

#define QDI_OS_WAIT_FOR_MAIN_REAPER		104

#define QDI_CLIENT_HANDLE_REFPROXY_INSTALL        105
#define QDI_CLIENT_HANDLE_REFPROXY_ADD            106
#define QDI_CLIENT_HANDLE_REFPROXY_REMOVE         107

#define QDI_CLIENT_HANDLE_DETACH                  116

#define QDI_OS_RESERVED1                       139

#define QDI_CLIENT_HANDLE_BUFFER_LOCK2   142

#define QDI_DT_REGISTER 158
#define QDI_OPEN_DEVICE 159
#define QDI_OPEN_FROM_DT 160

#define QDI_PRIVATE             256  /* Method numbers beginning at 256
                                        are private method numbers, which
                                        are device-specific and available
                                        for use by device implementors. */
/*
||  Permission bitmasks for use with qurt_qdi_lock_buffer().
||
||  Make sure these match with permission values from qurt_perm_t.
*/
/** @endcond */

/** @addtogroup driver_support_constants
@{ */
#define QDI_PERM_W              2                         /**< Write access. */
#define QDI_PERM_R              1                         /**< Read access. */
#define QDI_PERM_RW             (QDI_PERM_R | QDI_PERM_W) /**< Read/write access. */

#define QDI_HANDLE_LOCAL_CLIENT         3                 /**< Local client. */
#define QDI_HANDLE_GENERIC              4                 /**< Generic. */

#define QDI_REFCNT_BASE   0x510000                        /**<  */
#define QDI_REFCNT_MAXED  0x51FFFD                        /**<  */
#define QDI_REFCNT_INIT   0x51FFFE                        /**< Driver object is temporary and is eventually deleted.*/
#define QDI_REFCNT_PERM   0x51FFFF                        /**< Driver object is permanent and is never deleted. */
/** @} */ /* end_addtogroup driver_support_constants */

/** @cond */
/*
||  Flags used by process loaders.
*/

#define QDI_OS_PROCESS_FLAGS_ISLAND_RESIDENT    0x1     /* Set this flag to request the loaded process
                                                           to have island residency. */
#define QDI_OS_PROCESS_FLAGS_ROOT_RESIDENT      0x2     /* Set this flag to request the loaded process
                                                           to have root residency, for example, DL Pager. */
/*
||  Constants used for qurt_event register API, type field.
*/

#define QURT_PROCESS_EXIT   1

/*
||  Constants used by QDI extensions.
*/

#define QURT_QDI_SINGLETON_TYPE_TRUE			0
#define QURT_QDI_SINGLETON_TYPE_FALSE			1
#define QURT_QDI_SINGLETON_TYPE_PER_PROCESS		2
/** @endcond */
#ifdef __cplusplus
} /* closing brace for extern "C" */
#endif

#endif /* QDI_CONSTANTS_H */
